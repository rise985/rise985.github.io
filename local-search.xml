<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>美化Windows Terminal和WSL Terminal</title>
    <link href="/2024/11/04/%E7%BE%8E%E5%8C%96Windows%20Terminal%E5%92%8CWSL%20Terminal/"/>
    <url>/2024/11/04/%E7%BE%8E%E5%8C%96Windows%20Terminal%E5%92%8CWSL%20Terminal/</url>
    
    <content type="html"><![CDATA[<h2 id="美化Windows-Terminal"><a href="#美化Windows-Terminal" class="headerlink" title="美化Windows Terminal"></a>美化Windows Terminal</h2><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5Cimage-20241104003913699.png" alt="image-20241104003913699"></p><h4 id="1、微软商店搜索oh-my-posh，会自动配置环境变量"><a href="#1、微软商店搜索oh-my-posh，会自动配置环境变量" class="headerlink" title="1、微软商店搜索oh-my-posh，会自动配置环境变量"></a><strong>1、微软商店搜索oh-my-posh，会自动配置环境变量</strong></h4><p>主题文件在C:\Users\Sven98\AppData\Local\Programs\oh-my-posh\themes</p><h4 id="2、配置主题"><a href="#2、配置主题" class="headerlink" title="2、配置主题"></a><strong>2、配置主题</strong></h4><p>code $PROFILE  &#x2F;&#x2F;需要有vscode，没有请执行notepad $PROFILE </p><p>在$PROFILE写内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">clear</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span> init pwsh <span class="hljs-literal">--config</span> <span class="hljs-variable">$env:POSH_THEMES_PATH</span>\montys.omp.json | <span class="hljs-built_in">Invoke-Expression</span><br></code></pre></td></tr></table></figure><h4 id="3、乱码怎么解决？"><a href="#3、乱码怎么解决？" class="headerlink" title="3、乱码怎么解决？"></a><strong>3、乱码怎么解决？</strong></h4><p>下载其它font字体，例如JetBrains   下载地址<a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.1/JetBrainsMono.zip">https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.1/JetBrainsMono.zip</a></p><p>安装后，在终端使用</p><h4 id="4、禁止运行脚本怎么办？"><a href="#4、禁止运行脚本怎么办？" class="headerlink" title="4、禁止运行脚本怎么办？"></a><strong>4、禁止运行脚本怎么办？</strong></h4><p>用管理员运行powershell，改下更改执行策略。输入“set-executionpolicy remotesigned”，选，是</p><h4 id="5、每次都有提示文本，怎么关闭"><a href="#5、每次都有提示文本，怎么关闭" class="headerlink" title="5、每次都有提示文本，怎么关闭"></a><strong>5、每次都有提示文本，怎么关闭</strong></h4><p>在json配置文件，大概在80行左右，加入 -NoLogo</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5Cimage-20241104003926692.png" alt="image-20241104003926692"></p><h4 id="6、vscode终端乱码？"><a href="#6、vscode终端乱码？" class="headerlink" title="6、vscode终端乱码？"></a><strong>6、vscode终端乱码？</strong></h4><p>需要单独设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">JetBrainsMono Nerd <span class="hljs-attribute">Font</span> Mono<br></code></pre></td></tr></table></figure><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5Cimage-20241104003937361.png" alt="image-20241104003937361"></p><h4 id="7、预览所有主题"><a href="#7、预览所有主题" class="headerlink" title="7、预览所有主题"></a><strong>7、预览所有主题</strong></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Get-PoshThemes</span><br></code></pre></td></tr></table></figure><h2 id="WSL-for-Ubuntu"><a href="#WSL-for-Ubuntu" class="headerlink" title="WSL for Ubuntu"></a><strong>WSL for Ubuntu</strong></h2><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5Cimage-20241104004004133.png" alt="image-20241104004004133"></p><h4 id="1、安装oh-my-posh"><a href="#1、安装oh-my-posh" class="headerlink" title="1、安装oh-my-posh"></a><strong>1、安装oh-my-posh</strong></h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/JanDeDobbeleer/</span>oh-my-posh<span class="hljs-regexp">/releases/</span>latest<span class="hljs-regexp">/download/</span>posh-linux-amd64 -O <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>oh-my-posh sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>oh-my-posh<br></code></pre></td></tr></table></figure><h4 id="2、载入them"><a href="#2、载入them" class="headerlink" title="2、载入them"></a><strong>2、载入them</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/.poshthemes wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip unzip ~/.poshthemes/themes.zip -d ~/.poshthemes <span class="hljs-built_in">chmod</span> u+rw ~/.poshthemes/*.omp.* <span class="hljs-built_in">rm</span> ~/.poshthemes/themes.zip<br></code></pre></td></tr></table></figure><p>主题可以直接在Themes | Oh My Posh 查看，找到喜欢的json名字，在~&#x2F;.poshthemes下查看是否存在。</p><h4 id="3、启用主题，xxx-omp-json为你想要的主题（如果要默认启动就在etc-profile最后一行加入这个）"><a href="#3、启用主题，xxx-omp-json为你想要的主题（如果要默认启动就在etc-profile最后一行加入这个）" class="headerlink" title="3、启用主题，xxx.omp.json为你想要的主题（如果要默认启动就在etc&#x2F;profile最后一行加入这个）"></a><strong>3、启用主题，xxx.omp.json为你想要的主题（如果要默认启动就在etc&#x2F;profile最后一行加入这个）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(oh-my-posh --init --shell bash --config ~/.poshthemes/clean-detailed.omp.json)</span>&quot;</span><br></code></pre></td></tr></table></figure><h4 id="ubuntu安装字体"><a href="#ubuntu安装字体" class="headerlink" title="ubuntu安装字体"></a><strong>ubuntu安装字体</strong></h4><p>ubuntu安装字体 字体有.ttf格式（truetype font）和.otf格式（opentype font）字体，在Ubantu上安装相应的字体。 把字体拷贝到&#x2F;usr&#x2F;share&#x2F;fonts&#x2F;，如果是ttf格式创建truetype目录，如果是otf格式创建opentype目录。 sudo mkfontscale (创建字体的fonts.scale文件,它用来控制字体旋转缩放) sudo mkfontdir(创建字体的fonts.dir文件,它用来控制字体粗斜体产生) sudo fc-cache -fv(建立字体缓存信息) fc-list(查看已经安装的)</p>]]></content>
    
    
    <categories>
      
      <category>美化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近年HVV、红队攻防比赛中常见外围打点漏洞的分析与总结</title>
    <link href="/2024/11/04/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/%E8%BF%91%E5%B9%B4HVV%E3%80%81%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E6%AF%94%E8%B5%9B%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%A4%96%E5%9B%B4%E6%89%93%E7%82%B9%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <url>/2024/11/04/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/%E8%BF%91%E5%B9%B4HVV%E3%80%81%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E6%AF%94%E8%B5%9B%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%A4%96%E5%9B%B4%E6%89%93%E7%82%B9%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>免责声明：由于传播、利用本网站所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，网站及作者不为此承担任何责任，一旦造成后果请自行承担！如有侵权烦请告知，我们会立即删除并致歉。谢谢！</p><p>文章来源：<a href="https://mp.weixin.qq.com/s/3QXSfjp2cysR29FNLXaT_g">https://mp.weixin.qq.com/s/3QXSfjp2cysR29FNLXaT_g</a></p><h2 id="近年HVV、红队攻防比赛中常见外围打点漏洞的分析与总结"><a href="#近年HVV、红队攻防比赛中常见外围打点漏洞的分析与总结" class="headerlink" title="近年HVV、红队攻防比赛中常见外围打点漏洞的分析与总结"></a>近年HVV、红队攻防比赛中常见外围打点漏洞的分析与总结</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>前一段时间我花时间花精力总结了最近两三年中，在攻防比赛中比较常见的Web打点漏洞类型，捎带着把钓鱼邮件的主题类型也总结了一下。<strong>今天分享出来，相信无论是对于攻击方还是防守方，都能从中获得一些启发</strong>（一些小型攻防比赛、地级*攻防比赛，由于用各种常规漏洞也能打点成功，所以暂时不在以下统计范围之内）。</p><p>信息来源主要有以下几点：1、以往的攻防比赛中积累的经验；2、作为裁判研判漏洞经历；3、朋友同事之间的讨论；4、其它。接下来分类别将近些年红队人员常见打点漏洞分类给大家讲讲，<strong>希望对于红队可以帮助其进行梳理，对于蓝队人员可以有针对性地防护</strong>。</p><h2 id="Part1-超级0day及供应链0day"><a href="#Part1-超级0day及供应链0day" class="headerlink" title="Part1 超级0day及供应链0day"></a><strong>Part1 超级0day及供应链0day</strong></h2><p>对于一些超难的目标，很多只能靠这两种方法打进去。超级0day指的是那种可以一击致命的影响较大且又不容易被网络安全设备发现的漏洞，包括某VPN多个缓冲区溢出漏洞、某VPN任意加账号漏洞、某聊天软件命令执行、虚拟机逃逸0day、办公软件漏洞、浏览器级别的远程溢出等。对于这种超级0day，这里不多做讨论，<strong>对于大多数红队队员来说可遇不可求，这种级别0day漏洞基本上就是核武器，其它关于外网打点的技术和战术在其面前显得微不足道</strong>。</p><p>供应链0day漏洞危害同样很大，防护起来难度不小。原因是：很多公司业务量、资产非常庞大，难以把供应链资产完整梳理出来，漏掉一个点都不行，而红队人员是可以随机选取一个供应链的资产进行代码审计，进行漏洞挖掘的。总体来说，两方难度都不小，所以攻防总是相对的。</p><h4 id="Part2-社工钓鱼篇"><a href="#Part2-社工钓鱼篇" class="headerlink" title="Part2 社工钓鱼篇"></a><strong>Part2 社工钓鱼篇</strong></h4><ul><li><strong>邮件钓鱼</strong></li></ul><p>这里顺带提一下邮件钓鱼的主题吧，也属于外部打点的方法之一。我总结了一下，邮件钓鱼的题材，大致包括以下这6大类，后续ABC_123有精力再细分一下。</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C640.jpg" alt="图片"></p><p> <strong>工作类主题</strong>  求职简历、求职自荐信、员工转正申请、合作详情见附件、营业执照申请归档。</p><p> <strong>投诉类主题</strong>  违规收取各种费用投诉、针对某项事务的投诉建议、不合规责任通报、宣传与预期不符投诉、严重失职公告、过度采集用户信息投诉。</p><p> <strong>福利类主题</strong>  薪资调整通知、福利诱骗、中秋领月饼通知、节假日领奖通知、节假日福利通知、夏季高温津贴、夏季工服领取、薪资结构调整。</p><p> <strong>安全类主题</strong>  钓鱼邮件防护通知、安全漏洞补丁升级、攻防演练内部资料分享、防守方联系方式通知、重大漏洞检查通知。</p><p> <strong>通知类主题</strong>  邮箱配额升级、快递待处理单子、工作十六项准则、能力提升专研培训通知、疫情防控工作安排、个人所得税年度汇算清缴、学习强国教育、食堂菜谱调研通知。</p><p> <strong>热门话题类</strong>  世界杯、疫情相关等，估计大家都能想到。</p><ul><li><strong>微信加好友</strong></li></ul><p>红队队员通常会养几个小号，<strong>而且这些小号很多都是用美女头像，朋友圈还会定期发一些生活动态</strong>。红队队员首先在网上通过各种信息收集得到目标单位的员工手机号，然后通过微信加好友的方式，谎称自己是某大型公司的HR，发送年薪百万的岗位内部招聘主题类的压缩包，实际上里面是一个后门程序，这种方式有很多成功案例，<strong>大家要注意防范</strong>。</p><ul><li><strong>加qq群</strong></li></ul><p>红队队员会通过各种搜索，找到目标公司的一些员工以小组、部门形式自建的qq群，谎称自己是新员工入职，或者是某某领导让加群，或者安装安全检查工具等等。一旦加进群，会在qq群里发送一个藏有后门的压缩包，基本上都会获取较大的成果，此外还会在qq群共享里面查找一些敏感文档、通讯录列表等，很多时候都会在qq群里找到一些内部系统的账号密码，<strong>大家要注意防范</strong>。</p><ul><li><strong>脉脉求职+微信聊天组合</strong></li></ul><p>红队队员去脉脉等求职平台，定位到目标单位的运维技术等人员，谎称自己是阿里、腾讯、华为高管，进行年薪百万的定向招聘，然后诱导至微信聊天，发送钓鱼邮件木马压缩包。我惊讶地发现，这样的成功案例特别多，<strong>大家要注意防范</strong>。</p><h4 id="Part3-Web漏洞篇"><a href="#Part3-Web漏洞篇" class="headerlink" title="Part3 Web漏洞篇"></a><strong>Part3 Web漏洞篇</strong></h4><ul><li><strong>敏感信息泄露</strong></li></ul><p>我把它放在第一位，是因为希望可以引起大家的重视，有些单位都被搞过好几轮了，但是没想到还是会存在这些信息泄露问题，以下是一些案例，供大家参考。</p><p><strong>案例1</strong>：官网直接的JSON文档，里面直接有Mssql的明文账号密码，ip还是外网的。</p><p><strong>案例2</strong>：使用burpsuite抓包，js源码中存在某云的AK&#x2F;SK。</p><p><strong>案例3</strong>：对apk脱壳，反编译Java代码找到了某云的AK&#x2F;SK。</p><p><strong>案例4</strong>：对apk直接批量进行信息提取，找到了很多偏门的ip+端口的资产。</p><p><strong>案例5</strong>：网站的说明文档中会有一些意外的资产，然后用shiro反序列化、log4j2等常规漏洞可以打进去。</p><p><strong>案例6</strong>：官网链接的软件包中，配置文件含有Socks5代理，直连内网。</p><p><strong>案例7</strong>：SVN等源码泄露漏洞，通过php代码审计上传漏洞。</p><ul><li><strong>Shiro反序列化漏洞</strong></li></ul><p>这个漏洞这么多年一直存在，这一点让我还是很惊讶的，近几年一直有很多成功案例。<strong>但Shiro反序列化漏洞在一级单位或者二级域名资产非常难见到了，主要集中在2级单位的边缘资产，3、4级单位的资产，还有公众号、小程序等资产</strong>，其中的shiro的key都是常见的key，我个人感觉100多个常见的key列表足够了。</p><p>此外对于这种漏洞的利用，几个报告中贴出了难以见到的不常用的shiro key，但是我推测，应该是从springboot的heapdump中提取的shiro key，然后再进行加以利用的。对于这种漏洞的利用，记得把shiro key可以改掉，这样可以维持权限更久一些。</p><ul><li><strong>OA系统类漏洞</strong></li></ul><p>后续我总结了一下，这些OA系统主要包括某远oa、某微OA、某户oa、Fanruan、某综合安防系统、某微移动平台漏洞、某emobile、某凌OA、某友cloud、某友nc、某达OA系统、某道等，<strong>其nday漏洞在2级单位的边缘资产及3、4级单位还能遇到，一级、二级单位的主要资产除非有0day否则很难利用成功</strong>。</p><ul><li><strong>Fastjson漏洞</strong></li></ul><p>这种nday老洞还是有很多，<strong>尤其在目标资产的微信公众号、小程序资产上</strong>，对于json数据包都可以尝试一下。对于1.2.47之前的版本利用很简单，回显也可以实现；对于1.2.68之前的版本，利用方式多集中在fake mysql的思路打，少数有写shell的成功案例；对于1.2.68至1.2.80版本的fastjson，虽说有漏洞，但是目前我还未见过有实战打成功的，但是不排除有大佬有内部姿势，所以该升级到最新版本还是要升级的。</p><p>对于jackson反序列化，利用条件太过苛刻，成功案例极少，所以我见到jackson，一般就是放弃。</p><ul><li><strong>Log4j2漏洞</strong></li></ul><p>对于这个nday漏洞，和fastjson漏洞一样，多数使用burpsuite的被动扫描插件发现的，而且不知道在什么地方就会冒出来。<strong>大家在扫描这个漏洞的时候，记得不要用常见的dnslog</strong>，因为特征太明显了，主流的waf或者流量监控设备都把常用的dnslog加入了黑名单，最好自己匿名搭建一个，这也是为什么同样的log4j2漏洞别人能发现，而自己却发现不了的原因所在。</p><ul><li><strong>Springboot框架漏洞</strong></li></ul><p>对于SpringBoot漏洞的利用，**&#x2F;actuator&#x2F;env及heapdump的利用成功案例非常非常多，不但要看根目录，还要看子目录<strong>，还要看&#x2F;api&#x2F;目录下有没有相关的url路由。对于有的网站，每个子目录其实它映射到后端是不同的服务器应用。从heapdump里面可以提取各种账号密码，有不少找到某云AK&#x2F;SK的情况。再就是也</strong>看到了spring cloud gateway的利用**，这个漏洞起初我认为实战能遇到的可能性太小了，但是实战中确实存在，而且还见过好几个成功案例。</p><ul><li><strong>Nacos系列漏洞</strong></li></ul><p>这种漏洞和SpringBoot接口漏洞一样，<strong>利用成功案例出奇地多，同样也是根目录、二级目录都要看</strong>，红队队员的主要利用方式都是nacos弱口令、nacos加账号漏洞等，进入nacos后台之后，会找到数据库的账号密码。如果遇到Mssql、Oracle那么基本上可以拿下服务器权限，有时候会找到某云平台的AK&#x2F;SK，拿下很多服务器权限。</p><ul><li><strong>Weblogic漏洞</strong></li></ul><p><strong>Weblogic漏洞的利用相对于前几年大大减少，这也是让我非常惊讶的</strong>，自己曾研究这些漏洞的回显、内存马写入等，耗费了巨大的精力，但是我总是还能碰到weblogic反序列化，我想造成weblogic漏洞出现频率降低的原因可能有以下几个:</p><p><strong>1.</strong> 后续新出的Weblogic漏洞的利用在不出网情况下是很难拿权限的；</p><p><strong>2.</strong> Weblogic后续漏洞（如cve-2020-2555开始出现的coherence库系列漏洞）利用非常麻烦，<strong>解决coherence库的兼容性很麻烦</strong>，工具层面上很难兼顾；</p><p><strong>3.</strong> Webloigc的一些漏洞利用EXP在jdk1.5、jdk1.6、jdk1.7、jdk1.8等环境的下可能是不一样的，<strong>但是最终的利用工具只能在一个版本jdk下编译</strong>，所以有时候是很难兼顾的，因为本身就是自相矛盾的，导致利用不成功。</p><p><strong>4.</strong> 防火墙或者是waf直接拦截掉T3和IIOP协议，但是有时候只是拦截了T3，IIOP协议还是放行的，大家有时候可以试一下，当然蓝队也要记得防范。</p><p><strong>5.</strong> T3协议加入了filter，限制了白名单从而没法利用。</p><ul><li><strong>Ueditor上传漏洞</strong></li></ul><p>这个漏洞也很多，多数利用都集中在那个SSRF造成的getshell漏洞，<strong>同样根目录、二级目录都要看</strong>，一些js源码中会有ueditor目录记录，可以试试这个漏洞。</p><ul><li><strong>SQL注入漏洞</strong></li></ul><p>这个漏洞外网资产出现的频率比我想象的多，现在很多人都不愿意去找sql注入漏洞，但是我交流经验发现，<strong>在2级单位的边缘资产和3、4级单位仍然大量存在</strong>，如果发现sql注入漏洞，运气好遇到一个量很大的目标，那危害也是很严重的；如果遇到Mssql和Oracle可以提权拿到服务器权限。当然如果遇到云上系统，不到万不得已，还是去用其它方法吧，<strong>毕竟sql注入绕云waf成本太高了，有那个精力，还不如找一下其它入口</strong>。所以对于sql注入漏洞，大家还是要注意防范。</p><ul><li><strong>Tomcat漏洞</strong></li></ul><p>在多个单位的子公司的偏门资产上，居然还有tomcat弱口令tomcat:tomcat，这也是我没有想到的，这样的案例我见过好几次成功案例。我仔细看了一下，这些成功案例的共同特点就是，<strong>端口都不是常见端口8080，推测红队队员对每一个ip都做了全端口扫描及服务识别</strong>。此外还有tomcat AJP协议获取webshell的成功案例。</p><ul><li><strong>Struts2系列漏洞</strong></li></ul><p>现在的网站应用使用Struts2框架的越来越少了，但是还是能见到，外网也有几个成功案例。在内网横向过程中，它却发挥了比以前更大的价值，<strong>貌似都成了内网横向的利用漏洞了</strong>。</p><ul><li><strong>各种上传漏洞</strong></li></ul><p>管理员账号密码+后台上传shell，成功案例仍然非常多，而且非常典型，这里就不过多叙述了，相信大家都耳熟能详。</p><ul><li><strong>各种弱口令漏洞</strong></li></ul><p>sentinel弱口令、mysql的3306弱口令，但我未见到过外网的SQLServer的弱口令（推测原因是，如果存在弱口令，早就被外网的那些抓肉鸡战队给光顾了）、phpmyadmin弱口令、管理员弱口令（进后台能看到通讯录的话，也是有价值的）、druid未授权获取session，登录后台获取数据。</p><ul><li><strong>逻辑漏洞&#x2F;越权漏洞</strong></li></ul><p>公众号、小程序也会有一些业务逻辑漏洞，如常见的订单遍历、用户身份遍历，也是非常严重的。有些安全厂商可能没有自己的红队人员，但是仍然参加了攻防比赛，<strong>他们主要精力就放在挖掘业务逻辑漏洞上</strong>，但是有时候也会收到奇效，比如用户信息遍历漏洞，结果有很多行，危害也是很大的。解密小程序或者其他加密页面的js加密算法，会挖掘到高价值的业务逻辑漏洞。</p><ul><li><strong>其它漏洞</strong></li></ul><p>以下这些漏洞有成功案例，但是非常少见。向日葵RCE漏洞（非常见的高端口）、Jboss反序列化、ewebeditor上传漏洞、dubbo高端口的反序列化漏洞、RMI端口反序列化漏洞、nexus cve-2019-7238漏洞等等，xxl-job从内网翻到密码去外网拿权限，此外还有一些网络设备的漏洞，就不一一列举了。</p><h4 id="Part4-内网篇"><a href="#Part4-内网篇" class="headerlink" title="Part4 内网篇"></a><strong>Part4 内网篇</strong></h4><p>这部分后续有时间我再写文章着重讲解，本期先简单介绍一下：</p><p><strong>1.</strong> 针对VMware Vcenter等的漏洞利用大大增多，很多红队人员都喜欢在内网用这种漏洞打下一片机器，也就是打下了云平台。</p><p><strong>2.</strong> 打域控可以看到很多用Zerologon漏洞拿下来的，当然不排除可能是通过其它手段拿下域控，但是写报告时误写成了Zerologon漏洞。</p><p><strong>3.</strong> 拿到webshell或数据库后，多去翻一番某云的AK&#x2F;SK等，会有意想不到的收获。</p><p><strong>4.</strong> 对于工控系统，不得不承认，有些红队人员内网横向能力很强，从文字描述看，他们就是奔着工控目标去的，从一个网段跳到另一个网段，<strong>每横向一步，都知道自己在内网的什么位置，脑海中逐步形成一个清晰的内网拓扑图</strong>。</p><p>也有的红队队员拿下工控系统，是在内网中扫一圈各种服务的弱口令、通过MS17-010打了几台服务器，提取了通用的密码或者hash值，然后再滚雪球批量扫描，内网大批量扫描发现了工控的web管理界面等等，<strong>无意中进入了工控段，这其实也是一种方法</strong>。</p><p><strong>5.</strong> 内网拿到数据库或者域控服务器之后，别忘了用同等账号密码，<strong>尝试一下外网的统一认证系统，往往会有意想不到的收获</strong>，有时候会直接连上VPN等系统。所以要加强对外网统一认证系统的防护。</p>]]></content>
    
    
    <categories>
      
      <category>红队</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红队实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NetExec！新一代内网/域渗透神器</title>
    <link href="/2024/11/04/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/NetExec%EF%BC%81%E6%96%B0%E4%B8%80%E4%BB%A3%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8/"/>
    <url>/2024/11/04/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/NetExec%EF%BC%81%E6%96%B0%E4%B8%80%E4%BB%A3%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>免责声明：由于传播、利用本网站所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，网站及作者不为此承担任何责任，一旦造成后果请自行承担！如有侵权烦请告知，我们会立即删除并致歉。谢谢！</p><p>文章来源：<a href="https://mp.weixin.qq.com/s/owj5fBWirVzL-YcCwjZzEg">https://mp.weixin.qq.com/s/owj5fBWirVzL-YcCwjZzEg</a></p><p><strong>工具简介</strong></p><p>NetExec (nxc) 是一款功能强大的自动化网络安全评估与漏洞测试工具，是 CrackMapExec-已停止维护 (CME) 的现代继任者，现已被渗透测试人员和红队成员广泛使用，可被用于多种协议下的渗透测试中，目前支持的协议如下。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">smb</span><br><span class="hljs-attribute">ssh</span><br><span class="hljs-attribute">ldap</span><br><span class="hljs-attribute">ftp</span><br><span class="hljs-attribute">wmi</span><br><span class="hljs-attribute">winrm</span><br><span class="hljs-attribute">rdp</span><br><span class="hljs-attribute">vnc</span><br><span class="hljs-attribute">mssql</span><br><span class="hljs-attribute">nfs</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>并非所有协议都支持相同的功能，请务必检查每个协议的选项。</p><p><strong>Kali安装</strong></p><p>直接下载github上打包好的可执行文件即可，此种安装方式执行时间会较长，完美的方式是在kali下面使用apt安装。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt update sudo apt <span class="hljs-keyword">install</span> netexec<br></code></pre></td></tr></table></figure><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C1233213123.jpg" alt="图片"></p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C123.jpg" alt="图片"></p><p><strong>使用截图</strong></p><p>这里就贴一个使用哈希对MSSQL进行密码喷洒的截图（来源@暴暴的皮卡丘），其他就不去具体测试了（我懒），更全面的使用方法可看官方Wiki！</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//www.netexec.wiki/</span><br></code></pre></td></tr></table></figure><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C640.jpg" alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区分Spring与Struts2框架的几种新方法</title>
    <link href="/2024/11/04/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%88%86Spring%E4%B8%8EStruts2%E6%A1%86%E6%9E%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B0%E6%96%B9%E6%B3%95/"/>
    <url>/2024/11/04/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%88%86Spring%E4%B8%8EStruts2%E6%A1%86%E6%9E%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B0%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>免责声明：由于传播、利用本网站所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，网站及作者不为此承担任何责任，一旦造成后果请自行承担！如有侵权烦请告知，我们会立即删除并致歉。谢谢！<br>文章来源：<a href="https://cloud.tencent.com/developer/article/2037499">https://cloud.tencent.com/developer/article/2037499</a></p><h2 id="Part1前言"><a href="#Part1前言" class="headerlink" title="Part1前言"></a><strong>Part1前言</strong></h2><p>在近几年的HW比赛、红队项目中，攻击队在外围打点时，越来越依赖于对Java站点的漏洞挖掘。Java站点的主流框架大致就是两个：Struts2系列（包括Webwork等）及Spring系列（包括Spring MVC、SpringBoot等）。很多攻击队员在查找网站漏洞时，由于无法判断出网站所使用的框架，对于.do结尾的网站上去就是用Struts2工具、Spring漏洞工具开扫，这样的做法效率极低，容易被WAF封禁IP，进而导致错过相关漏洞。</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C6ad261ffdd09a4de136c8838e89fce60.png" alt="img"></p><p>网上的区分Struts2与Spring的方法，大多数是通过查看.do及.action后缀、网页报错、网站error异常、浏览器favicon.ico图标、Struts2拦截器报错等等，但是这些方法适用范围比较窄。</p><p>本人前几年在调试分析S2-016、S2-032等漏洞的时候，无意中发现了几个特别简单实用的方法，现分享给大家。简单来说，就是利用Struts2框架和Spring框架在处理一些特殊的URL路径时，返回结果不一样的特性。</p><h2 id="Part2方法汇总"><a href="#Part2方法汇总" class="headerlink" title="Part2方法汇总"></a><strong>Part2方法汇总</strong></h2><h3 id="方法1、URL中添加不存在路径"><a href="#方法1、URL中添加不存在路径" class="headerlink" title="方法1、URL中添加不存在路径"></a><strong>方法1、URL中添加不存在路径</strong></h3><p>在URL的反斜杠部分添加网站不存在的路径，最好是随机字符串组成的较长路径，如果返回同样的页面，则大概率是Struts2框架，如果返回404或者是报错，则大概率是Spring框架。</p><p>比如说：<a href="http://192.168.237.128:8080/struts2_032/example/aaaaaa1/bbbbbbbb2/ccccccccc3/HelloWorld.action">http://192.168.237.128:8080/struts2_032/example/aaaaaa1/bbbbbbbb2/ccccccccc3/HelloWorld.action</a></p><p>在Struts2框架下，完全可以正常返回页面。</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5Cc11f93b22ba6404c35fa84dfe52017fa.jpeg" alt="img"></p><p>而Spring框架会出错</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C87b29f0ed0a897e762e988473bcf174d.jpeg" alt="img"></p><p>具体判断过程应参考如下步骤，一会儿讲讲具体原因：</p><p>对于如下URL：<a href="http://127.0.0.1:9999/S2_016_war/barspace/login.do">http://127.0.0.1:9999/S2_016_war/barspace/login.do</a></p><h4 id="第1步："><a href="#第1步：" class="headerlink" title="第1步："></a><strong>第1步：</strong></h4><p>在最后右边反斜杠处添加一个不存在的路径&#x2F;xxxxxxxxxx&#x2F;，如下所示：</p><p><a href="http://127.0.0.1:9999/S2_016_war/barspace/xxxxxxxxx/login.do">http://127.0.0.1:9999/S2_016_war/barspace/xxxxxxxxx/login.do</a> 返回与原URL相同页面，则是Struts2框架</p><p><a href="http://127.0.0.1:9999/S2_016_war/barspace/xxxxxxxxx/login.do">http://127.0.0.1:9999/S2_016_war/barspace/xxxxxxxxx/login.do</a> 返回与原URL异同页面，则是Spring框架</p><h4 id="第2步："><a href="#第2步：" class="headerlink" title="第2步："></a><strong>第2步：</strong></h4><p>如果两个URL均报错、或者均正常，无法区分，那么继续在前一个反斜杠处添加一个不存在的路径，如下所示：</p><p><a href="http://127.0.0.1:9999/S2_016_war/xxxxxxxxx/barspace/login.do">http://127.0.0.1:9999/S2_016_war/xxxxxxxxx/barspace/login.do</a> 返回与原URL相同页面，则是Struts2框架</p><p><a href="http://127.0.0.1:9999/S2_016_war/xxxxxxxxx/barspace/login.do">http://127.0.0.1:9999/S2_016_war/xxxxxxxxx/barspace/login.do</a> 返回与原URL异同页面，则是Spring框架</p><h4 id="第3步："><a href="#第3步：" class="headerlink" title="第3步："></a><strong>第3步：</strong></h4><p>如果还是没法区分，继续在前一个反斜杠处添加一个不存在的路径，如下所示：</p><p><a href="http://127.0.0.1:9999/xxxxxxxxx/S2_016_war/barspace/login.do">http://127.0.0.1:9999/xxxxxxxxx/S2_016_war/barspace/login.do</a> 返回与原URL相同页面，则是Struts2框架</p><p><a href="http://127.0.0.1:9999/xxxxxxxxx/S2_016_war/barspace/login.do">http://127.0.0.1:9999/xxxxxxxxx/S2_016_war/barspace/login.do</a> 返回与原URL异同页面，则是Spring框架</p><p>按照前面的步骤，依次添加不存在的路径，直到URL根目录为止。</p><h4 id="原理1：Struts2的URL构造"><a href="#原理1：Struts2的URL构造" class="headerlink" title="原理1：Struts2的URL构造"></a><strong>原理1：Struts2的URL构造</strong></h4><p>如果了解Struts2框架的读者，一眼就能看明白这种方法的原理，对于其他读者，要想弄明白这个方法的原理，首先需要看一下Struts2的URL构造：</p><p>Struts2站点的URL路径包括四部分组成：工程名+namespace命名空间+action名+Struts2扩展名，举个例子，对于如下URL：<a href="http://127.0.0.1:9999/S2_016_war/barspace/login.action">http://127.0.0.1:9999/S2_016_war/barspace/login.action</a></p><p>如果在Struts2框架中，大致应该这样去分析这个URL：</p><p>&#x2F;S2-016-war&#x2F;部分是war包部署的工程名，也可以说是项目名、上下文等等，说法不一。</p><p>&#x2F;barspace&#x2F;部分是Struts2的命名空间namespace。</p><p>&#x2F;login部分是Struts2的action名，指向具体处理请求的Java类。</p><p>.action部分是Struts2的扩展名，也可以定义为.do、.dw等等。</p><p>参考如下的struts.xml配置文件：</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C2dfb13a398234c0d2bf946d296f3cdbe.png" alt="img"></p><p>同样对于URL：<a href="http://127.0.0.1:9999/S2_016_war/barspace/login.action">http://127.0.0.1:9999/S2_016_war/barspace/login.action</a></p><p>如果网站应用直接部署在Tomcat根目录下，则工程名可以为空，此时URL如下所示：</p><p><a href="http://127.0.0.1:9999/barspace/login.action">http://127.0.0.1:9999/barspace/login.action</a></p><p>如果namespace设置为空，则URL如下：</p><p><a href="http://127.0.0.1:9999/login.action">http://127.0.0.1:9999/login.action</a></p><p>如果Struts2请求的扩展名为空，则URL如下：</p><p><a href="http://127.0.0.1:9999/login%EF%BC%88%E7%94%B1%E6%AD%A4%E5%8F%AF%E8%A7%81%EF%BC%8C%E8%BF%99%E7%A7%8DURL%E8%B7%AF%E5%BE%84%E4%B9%9F%E5%8F%AF%E8%83%BD%E6%98%AFStruts2%E6%A1%86%E6%9E%B6%E7%9A%84%EF%BC%89">http://127.0.0.1:9999/login（由此可见，这种URL路径也可能是Struts2框架的）</a></p><p>其中namespace可以配置为&#x2F;barspace&#x2F;spac1、action也可以配置为&#x2F;login&#x2F;user.action。这也是为什么有时候，我们需要在URL的每一个反斜杠前都添加一次不存在URL路径的原因，因为很难直接从URL中判断出哪一部分是namespace、哪一部分是action名。</p><h4 id="原理2：Struts2向上查找action名"><a href="#原理2：Struts2向上查找action名" class="headerlink" title="原理2：Struts2向上查找action名"></a><strong>原理2：Struts2向上查找action名</strong></h4><p>在了解了Struts2的URL构造之后，接下来看一下如下URL，在Struts2下是可以返回正常页面的：<a href="http://127.0.0.1:9999/S2_016_war/barspace/aaaaaaaaaa1/bbbbbbbb2/ccccccccc3/ddddddddddddd4/login.action">http://127.0.0.1:9999/S2_016_war/barspace/aaaaaaaaaa1/bbbbbbbb2/ccccccccc3/ddddddddddddd4/login.action</a></p><p>因为按照Struts2框架规则，首先会在当前路径下找action名login，如果没有找到去上一层找，还没有找到会去上上层找，一直找到应用程序的根路径为止。层层向上查找，直接找到应用程序为止。（真实的流程比这个复杂）</p><p>注：在网站的前端如果有nginx时，这种方法可能会无效，因为nginx可能会配置一些特殊URL转发，这时候就是nginx转发优先了。</p><h3 id="方法2、URL添加-struts-domTT-css"><a href="#方法2、URL添加-struts-domTT-css" class="headerlink" title="方法2、URL添加&#x2F;struts&#x2F;domTT.css"></a><strong>方法2、URL添加&#x2F;struts&#x2F;domTT.css</strong></h3><p>在URL的Web应用根目录下添加&#x2F;struts&#x2F;domTT.css，如果返回css代码，那么99%是Struts2。</p><p>注：这个domTT.css文件在网站源码文件中是找不到的，用磁盘搜索的方式搜索不到的，那为什么能访问到呢，因为这个文件在Struts2的jar包中。</p><p>原理：凡是以&#x2F;struts开头的URL，Struts2的过滤器都会到struts2-core-2.0.x.jar：&#x2F;org&#x2F;apache&#x2F;struts2&#x2F;static&#x2F;下面去找资源，然后读取此文件内容。</p><p>举例如下：</p><p><a href="http://192.168.237.128:8080/struts2_032/example/HelloWorld.action">http://192.168.237.128:8080/struts2_032/example/HelloWorld.action</a></p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C680996a7b922b568961ee950d21dc04a.jpeg" alt="img"></p><p>在网站根目录下添加&#x2F;struts&#x2F;domTT.css后访问，返回css代码。</p><p><a href="http://192.168.237.128:8080/struts2_032/struts/domTT.css">http://192.168.237.128:8080/struts2_032/struts/domTT.css</a></p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5Cf2d6b90720fa1d912b3c6426ee3b3260.png" alt="img"></p><p>注: 有一些低版本的Struts2框架，domTT.css文件不存在，需要更换为其它静态文件路径。</p><h3 id="方法3、404、500响应码返回信息"><a href="#方法3、404、500响应码返回信息" class="headerlink" title="方法3、404、500响应码返回信息"></a><strong>方法3、404、500响应码返回信息</strong></h3><p>输入一个不存在的路径，返回404页面，或者传入一些乱码字符，造成当前页面500响应码报错，抛出异常信息。</p><p>Struts2常用的关键字有这些：例如no action mapped、struts2、namespace、defined for action等。</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C02d9a9faf31822cf04cb223e0e9bc9bc.png" alt="img"></p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C2fb75b46a04210ee6d50a2fa38caac42.png" alt="img"></p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5Cd664c4376a23071068fef8f0c0d0ee8c.png" alt="img"></p><p>Spring的报错信息如下：含有Whitelabel Error Page 关键字</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C4a78c4c177f337ca147bebba33374679.png" alt="img"></p><h3 id="方法4：看网站图标favicon-ico"><a href="#方法4：看网站图标favicon-ico" class="headerlink" title="方法4：看网站图标favicon.ico"></a><strong>方法4：看网站图标favicon.ico</strong></h3><p>注意看下图的左上角，有一片小绿叶的图标，那基本上就是Spring了，而Struts2框架没有常用的favicon.ico图标。</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5Cb32211251bc2c927698b623a1a8978d6.jpeg" alt="img"></p><h2 id="Part3总结："><a href="#Part3总结：" class="headerlink" title="Part3总结："></a><strong>Part3总结：</strong></h2><ol><li>URL扩展名不能用于区分Struts2、Spring框架，.do结尾的URL可能是Struts2、也可能是Spring，具体看程序员在配置文件中怎么写。</li><li>利用处理特定URL时返回页面不相同的方法，可以区分不同的框架。</li><li>总结各种报错信息，可以区分不同Web应用所采用的框架。</li><li>多调试分析一下公开的漏洞，也会发现很多有趣的东西。还有其它的方法，有待大家挖掘。</li></ol>]]></content>
    
    
    <categories>
      
      <category>红队</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红队实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>360 新天擎终端安全管理系统存在信息泄露漏洞</title>
    <link href="/2024/06/14/360%20%E6%96%B0%E5%A4%A9%E6%93%8E%E7%BB%88%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/06/14/360%20%E6%96%B0%E5%A4%A9%E6%93%8E%E7%BB%88%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="360-新天擎终端安全管理系统存在信息泄露漏洞"><a href="#360-新天擎终端安全管理系统存在信息泄露漏洞" class="headerlink" title="360 新天擎终端安全管理系统存在信息泄露漏洞"></a>360 新天擎终端安全管理系统存在信息泄露漏洞</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /runtime/admin_log_confcache<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络设备漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>360天擎</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
