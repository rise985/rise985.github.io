<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>360 新天擎终端安全管理系统存在信息泄露漏洞</title>
    <link href="/2024/06/14/360%20%E6%96%B0%E5%A4%A9%E6%93%8E%E7%BB%88%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/06/14/360%20%E6%96%B0%E5%A4%A9%E6%93%8E%E7%BB%88%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="360-新天擎终端安全管理系统存在信息泄露漏洞"><a href="#360-新天擎终端安全管理系统存在信息泄露漏洞" class="headerlink" title="360 新天擎终端安全管理系统存在信息泄露漏洞"></a>360 新天擎终端安全管理系统存在信息泄露漏洞</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /runtime/admin_log_confcache<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络设备漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>360天擎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>360 新天擎终12312端安全管理系统存在信息泄露漏洞</title>
    <link href="/2024/06/14/2222222/"/>
    <url>/2024/06/14/2222222/</url>
    
    <content type="html"><![CDATA[<h2 id="Part1前言"><a href="#Part1前言" class="headerlink" title="Part1前言"></a><strong>Part1前言</strong></h2><p>在近几年的HW比赛、红队项目中，攻击队在外围打点时，越来越依赖于对Java站点的漏洞挖掘。Java站点的主流框架大致就是两个：Struts2系列（包括Webwork等）及Spring系列（包括Spring MVC、SpringBoot等）。很多攻击队员在查找网站漏洞时，由于无法判断出网站所使用的框架，对于.do结尾的网站上去就是用Struts2工具、Spring漏洞工具开扫，这样的做法效率极低，容易被WAF封禁IP，进而导致错过相关漏洞。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/12415279/1716708639621-2a695f3d-2e4a-4e2c-b2ad-57d2cfec2609.png" alt="img"></p><p>网上的区分Struts2与Spring的方法，大多数是通过查看.do及.action后缀、网页报错、网站error异常、浏览器favicon.ico图标、Struts2拦截器报错等等，但是这些方法适用范围比较窄。</p><p>本人前几年在调试分析S2-016、S2-032等漏洞的时候，无意中发现了几个特别简单实用的方法，现分享给大家。简单来说，就是利用Struts2框架和Spring框架在处理一些特殊的URL路径时，返回结果不一样的特性。</p><h2 id="Part2方法汇总"><a href="#Part2方法汇总" class="headerlink" title="Part2方法汇总"></a><strong>Part2方法汇总</strong></h2><h3 id="方法1、URL中添加不存在路径"><a href="#方法1、URL中添加不存在路径" class="headerlink" title="方法1、URL中添加不存在路径"></a><strong>方法1、URL中添加不存在路径</strong></h3><p>在URL的反斜杠部分添加网站不存在的路径，最好是随机字符串组成的较长路径，如果返回同样的页面，则大概率是Struts2框架，如果返回404或者是报错，则大概率是Spring框架。</p><p>比如说：<a href="http://192.168.237.128:8080/struts2_032/example/aaaaaa1/bbbbbbbb2/ccccccccc3/HelloWorld.action">http://192.168.237.128:8080/struts2_032/example/aaaaaa1/bbbbbbbb2/ccccccccc3/HelloWorld.action</a></p><p>在Struts2框架下，完全可以正常返回页面。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/12415279/1716708639656-574134a3-ccfd-4d5b-99d5-7a436fbb10e7.jpeg" alt="img"></p><p>而Spring框架会出错</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/12415279/1716708639622-edfba446-483b-4799-b130-55430ffa58e4.jpeg" alt="img"></p><p>具体判断过程应参考如下步骤，一会儿讲讲具体原因：</p><p>对于如下URL：<a href="http://127.0.0.1:9999/S2_016_war/barspace/login.do">http://127.0.0.1:9999/S2_016_war/barspace/login.do</a></p><h4 id="第1步："><a href="#第1步：" class="headerlink" title="第1步："></a><strong>第1步：</strong></h4><p>在最后右边反斜杠处添加一个不存在的路径&#x2F;xxxxxxxxxx&#x2F;，如下所示：</p><p><a href="http://127.0.0.1:9999/S2_016_war/barspace/xxxxxxxxx/login.do">http://127.0.0.1:9999/S2_016_war/barspace/xxxxxxxxx/login.do</a> 返回与原URL相同页面，则是Struts2框架</p><p><a href="http://127.0.0.1:9999/S2_016_war/barspace/xxxxxxxxx/login.do">http://127.0.0.1:9999/S2_016_war/barspace/xxxxxxxxx/login.do</a> 返回与原URL异同页面，则是Spring框架</p><h4 id="第2步："><a href="#第2步：" class="headerlink" title="第2步："></a><strong>第2步：</strong></h4><p>如果两个URL均报错、或者均正常，无法区分，那么继续在前一个反斜杠处添加一个不存在的路径，如下所示：</p><p><a href="http://127.0.0.1:9999/S2_016_war/xxxxxxxxx/barspace/login.do">http://127.0.0.1:9999/S2_016_war/xxxxxxxxx/barspace/login.do</a> 返回与原URL相同页面，则是Struts2框架</p><p><a href="http://127.0.0.1:9999/S2_016_war/xxxxxxxxx/barspace/login.do">http://127.0.0.1:9999/S2_016_war/xxxxxxxxx/barspace/login.do</a> 返回与原URL异同页面，则是Spring框架</p><h4 id="第3步："><a href="#第3步：" class="headerlink" title="第3步："></a><strong>第3步：</strong></h4><p>如果还是没法区分，继续在前一个反斜杠处添加一个不存在的路径，如下所示：</p><p><a href="http://127.0.0.1:9999/xxxxxxxxx/S2_016_war/barspace/login.do">http://127.0.0.1:9999/xxxxxxxxx/S2_016_war/barspace/login.do</a> 返回与原URL相同页面，则是Struts2框架</p><p><a href="http://127.0.0.1:9999/xxxxxxxxx/S2_016_war/barspace/login.do">http://127.0.0.1:9999/xxxxxxxxx/S2_016_war/barspace/login.do</a> 返回与原URL异同页面，则是Spring框架</p><p>按照前面的步骤，依次添加不存在的路径，直到URL根目录为止。</p><h4 id="原理1：Struts2的URL构造"><a href="#原理1：Struts2的URL构造" class="headerlink" title="原理1：Struts2的URL构造"></a><strong>原理1：Struts2的URL构造</strong></h4><p>如果了解Struts2框架的读者，一眼就能看明白这种方法的原理，对于其他读者，要想弄明白这个方法的原理，首先需要看一下Struts2的URL构造：</p><p>Struts2站点的URL路径包括四部分组成：工程名+namespace命名空间+action名+Struts2扩展名，举个例子，对于如下URL：<a href="http://127.0.0.1:9999/S2_016_war/barspace/login.action">http://127.0.0.1:9999/S2_016_war/barspace/login.action</a></p><p>如果在Struts2框架中，大致应该这样去分析这个URL：</p><p>&#x2F;S2-016-war&#x2F;部分是war包部署的工程名，也可以说是项目名、上下文等等，说法不一。</p><p>&#x2F;barspace&#x2F;部分是Struts2的命名空间namespace。</p><p>&#x2F;login部分是Struts2的action名，指向具体处理请求的Java类。</p><p>.action部分是Struts2的扩展名，也可以定义为.do、.dw等等。</p><p>参考如下的struts.xml配置文件：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/12415279/1716708639624-07d8ba26-4a6b-4b7f-8b73-687b8b0c51cc.png" alt="img"></p><p>同样对于URL：<a href="http://127.0.0.1:9999/S2_016_war/barspace/login.action">http://127.0.0.1:9999/S2_016_war/barspace/login.action</a></p><p>如果网站应用直接部署在Tomcat根目录下，则工程名可以为空，此时URL如下所示：</p><p><a href="http://127.0.0.1:9999/barspace/login.action">http://127.0.0.1:9999/barspace/login.action</a></p><p>如果namespace设置为空，则URL如下：</p><p><a href="http://127.0.0.1:9999/login.action">http://127.0.0.1:9999/login.action</a></p><p>如果Struts2请求的扩展名为空，则URL如下：</p><p><a href="http://127.0.0.1:9999/login%EF%BC%88%E7%94%B1%E6%AD%A4%E5%8F%AF%E8%A7%81%EF%BC%8C%E8%BF%99%E7%A7%8DURL%E8%B7%AF%E5%BE%84%E4%B9%9F%E5%8F%AF%E8%83%BD%E6%98%AFStruts2%E6%A1%86%E6%9E%B6%E7%9A%84%EF%BC%89">http://127.0.0.1:9999/login（由此可见，这种URL路径也可能是Struts2框架的）</a></p><p>其中namespace可以配置为&#x2F;barspace&#x2F;spac1、action也可以配置为&#x2F;login&#x2F;user.action。这也是为什么有时候，我们需要在URL的每一个反斜杠前都添加一次不存在URL路径的原因，因为很难直接从URL中判断出哪一部分是namespace、哪一部分是action名。</p><h4 id="原理2：Struts2向上查找action名"><a href="#原理2：Struts2向上查找action名" class="headerlink" title="原理2：Struts2向上查找action名"></a><strong>原理2：Struts2向上查找action名</strong></h4><p>在了解了Struts2的URL构造之后，接下来看一下如下URL，在Struts2下是可以返回正常页面的：<a href="http://127.0.0.1:9999/S2_016_war/barspace/aaaaaaaaaa1/bbbbbbbb2/ccccccccc3/ddddddddddddd4/login.action">http://127.0.0.1:9999/S2_016_war/barspace/aaaaaaaaaa1/bbbbbbbb2/ccccccccc3/ddddddddddddd4/login.action</a></p><p>因为按照Struts2框架规则，首先会在当前路径下找action名login，如果没有找到去上一层找，还没有找到会去上上层找，一直找到应用程序的根路径为止。层层向上查找，直接找到应用程序为止。（真实的流程比这个复杂）</p><p>注：在网站的前端如果有nginx时，这种方法可能会无效，因为nginx可能会配置一些特殊URL转发，这时候就是nginx转发优先了。</p><h3 id="方法2、URL添加-struts-domTT-css"><a href="#方法2、URL添加-struts-domTT-css" class="headerlink" title="方法2、URL添加&#x2F;struts&#x2F;domTT.css"></a><strong>方法2、URL添加&#x2F;struts&#x2F;domTT.css</strong></h3><p>在URL的Web应用根目录下添加&#x2F;struts&#x2F;domTT.css，如果返回css代码，那么99%是Struts2。</p><p>注：这个domTT.css文件在网站源码文件中是找不到的，用磁盘搜索的方式搜索不到的，那为什么能访问到呢，因为这个文件在Struts2的jar包中。</p><p>原理：凡是以&#x2F;struts开头的URL，Struts2的过滤器都会到struts2-core-2.0.x.jar：&#x2F;org&#x2F;apache&#x2F;struts2&#x2F;static&#x2F;下面去找资源，然后读取此文件内容。</p><p>举例如下：</p><p><a href="http://192.168.237.128:8080/struts2_032/example/HelloWorld.action">http://192.168.237.128:8080/struts2_032/example/HelloWorld.action</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/12415279/1716708639631-11432f07-fa55-4fdd-94a7-661f3df4f9d9.jpeg" alt="img"></p><p>在网站根目录下添加&#x2F;struts&#x2F;domTT.css后访问，返回css代码。</p><p><a href="http://192.168.237.128:8080/struts2_032/struts/domTT.css">http://192.168.237.128:8080/struts2_032/struts/domTT.css</a></p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C1716708640181-446dfbff-4df1-456c-983c-b7e05ff3a54d.png" alt="img"></p><p>注: 有一些低版本的Struts2框架，domTT.css文件不存在，需要更换为其它静态文件路径。</p><h3 id="方法3、404、500响应码返回信息"><a href="#方法3、404、500响应码返回信息" class="headerlink" title="方法3、404、500响应码返回信息"></a><strong>方法3、404、500响应码返回信息</strong></h3><p>输入一个不存在的路径，返回404页面，或者传入一些乱码字符，造成当前页面500响应码报错，抛出异常信息。</p><p>Struts2常用的关键字有这些：例如no action mapped、struts2、namespace、defined for action等。</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C1716708640057-71280d49-372a-4bc6-821c-a26d5d9ef007.png" alt="img"></p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C1716708640033-530f2a15-520e-43af-80aa-bb8daaa24506.png" alt="img"></p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C1716708640034-88d71eb7-37c3-442a-8eb4-c276d10d17d1.png" alt="img"></p><p>Spring的报错信息如下：含有Whitelabel Error Page 关键字</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C1716708640065-3eef47aa-d3c0-4ea1-8cdf-b887bc927965.png" alt="img"></p><h3 id="方法4：看网站图标favicon-ico"><a href="#方法4：看网站图标favicon-ico" class="headerlink" title="方法4：看网站图标favicon.ico"></a><strong>方法4：看网站图标favicon.ico</strong></h3><p>注意看下图的左上角，有一片小绿叶的图标，那基本上就是Spring了，而Struts2框架没有常用的favicon.ico图标。</p><p><img src="https://xiaoqian8.oss-cn-shanghai.aliyuncs.com/img%5C1716708640563-e20bf3a8-567c-4b0c-afd0-03d568a24186.jpeg" alt="img"></p><h2 id="Part3总结："><a href="#Part3总结：" class="headerlink" title="Part3总结："></a><strong>Part3总结：</strong></h2><ol><li>URL扩展名不能用于区分Struts2、Spring框架，.do结尾的URL可能是Struts2、也可能是Spring，具体看程序员在配置文件中怎么写。</li><li>利用处理特定URL时返回页面不相同的方法，可以区分不同的框架。</li><li>总结各种报错信息，可以区分不同Web应用所采用的框架。</li><li>多调试分析一下公开的漏洞，也会发现很多有趣的东西。还有其它的方法，有待大家挖掘。</li></ol>]]></content>
    
    
    <categories>
      
      <category>网络设备漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>360123擎</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
